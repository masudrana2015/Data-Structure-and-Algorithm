.................
.................
bfs
.................
.................
#include <bits/stdc++.h>

using namespace std;

void bfs(int n, vector<int>g[], int source){
    bool visited[n+1];
    int distance[n+1];
    for(int i=1;i<=n;i++) {
        visited[i] = false;
    }
        
    queue<int>q;
    q.push(source);
    visited[source] = 1;
    distance[source] = 0;
    
    while(!q.empty()){
        int u=q.front();
        q.pop();
        for(int i=0;i<(int)g[u].size();i++){
            int v=g[u][i];
            if(!visited[v]){
                visited[v] = true;
                q.push(v);
                distance[v] = distance[u] + 1;
            }
        }
    }
    for(int i=1;i<=n;i++){
        cout<<source<<" --> "<<i<<" = "<<distance[i]<<endl;
    }
}
int main(){
    
    vector<int>g[10000]; //this code can handle maximum 10000 nodes
    int numNodes, numEdges;
    cin>>numNodes>>numEdges;
    for(int i=0;i<numEdges;i++){
        int u, v;
        cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    int source;
    cin>>source;
    bfs(numNodes, g, source);
    
    return 0;
}

................
................
dfs
................
................

#include <bits/stdc++.h>

using namespace std;

#define MAXN 100000
#define WHITE 0
#define GREY 1
#define BLACK 2

vector< int > G[MAXN];
int dfsTime = 0;
int color[MAXN];
int d[MAXN];
int f[MAXN];

void DFS(int u) {
	dfsTime = dfsTime + 1;
	d[u] = dfsTime;
	color[u] = GREY;
	for(int i = 0; i<(int)G[u].size(); i++) {
		int v = G[u][i];
		//if color[v] is grey, it is a back edge
		//if color[v] is white, it is a tree edge
		if(color[v] == WHITE) {
			DFS(v);
		} 
	}
	color[u] = BLACK;
	dfsTime = dfsTime + 1;
	f[u] = dfsTime;
}
int main(){

	int n, e;
	cin>>n>>e;
	for(int i = 0; i < e; i++) {
		int u, v;
		cin>>u>>v;
		G[u].push_back(v);
	}
	
	for(int i=1;i<=n;i++){
		if(color[i] == WHITE) {
			DFS(i);
		}
	}
	
	for(int i = 1; i <=n; i++){
		cout<<i<<" -> "<<d[i]<<" "<<f[i]<<endl;
	}
    return 0;
}

...........
...........
dsu
............
............

#include <bits/stdc++.h>

using namespace std;
#define infinity 1<<28
#define mx 100000

int parent[mx];
void makeset(int u){
    parent[u] = u;
}
void init_disjoint_set(int numNodes){
    for(int i=1;i<=numNodes;i++){
        makeset(i);
    }
}

int find_representative(int u){
    if(parent[u]==u) return u;
    return find_representative(parent[u]);
}

void set_union(int u,int v){
    int rep_u = find_representative(u);
    int rep_v = find_representative(v);
    if(rep_u != rep_v){
        parent[rep_u] = rep_v;
    }
}

int main(){

    int numNodes, numEdges;
    cin>>numNodes>>numEdges;
    init_disjoint_set(numNodes);
    for(int i=0;i<numEdges;i++){
          int u, v;
          cin>>u>>v;
          set_union(u, v);
    }
    
    //print the number of different representatives
    set<int>representatives;
    for(int i=1;i<=numNodes;i++){
        representatives.insert(find_representative(i));
    }
    cout<<representatives.size()<<endl;
   
    return 0;
}
